#include <stdio.h>
#define INF 9999
#define N 4 // Number of vertices in the graph

void printMatrix(int matrix[N][N]) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            if (matrix[i][j] == INF) {
                printf("INF ");
            } else {
                printf("%3d ", matrix[i][j]);
            }
        }
        printf("\n");
    }
    printf("\n");
}

void floydWarshall(int graph[N][N]) {
    int dist[N][N];
    // Initialize distance matrix with the input graph's weight matrix
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            dist[i][j] = graph[i][j];
        }
    }
    // Apply Floyd's algorithm
    for (int k = 0; k < N; k++) {
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                if (dist[i][k] + dist[k][j] < dist[i][j]) {
                    dist[i][j] = dist[i][k] + dist[k][j];
                }
            }
        }
    }
    // Print the distance matrix
    printf("Distance matrix of shortest paths:\n");
    printMatrix(dist);
}

int main() {
    // Example graph represented as a weight matrix
    int graph[N][N] = {
        {0, INF, 3, INF},
        {2, 0, INF, INF},
        {INF, 7, 0, 1},
        {6, INF, INF, 0}
    };
    printf("Input weight matrix:\n");
    printMatrix(graph);
    floydWarshall(graph);
    return 0;
}
