#include <stdio.h>
#define N 4 // Number of vertices in the graph

void printMatrix(int matrix[N][N]) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            printf("%d ", matrix[i][j]);
        }
        printf("\n");
    }
    printf("\n");
}

void warshallAlgorithm(int graph[N][N]) {
    int reach[N][N];
    // Initialize reachability matrix with the input graph's adjacency matrix
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            reach[i][j] = graph[i][j];
        }
    }
    // Apply Warshall's algorithm
    for (int k = 0; k < N; k++) {
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                reach[i][j] = reach[i][j] || (reach[i][k] && reach[k][j]);
            }
        }
    }
    // Print the transitive closure of the graph
    printf("Transitive closure of the given graph:\n");
    printMatrix(reach);
}

int main() {
    // Example graph represented as an adjacency matrix
    int graph[N][N] = {
        {0, 1, 0, 0},
        {0, 0, 0, 1},
        {0, 0, 0, 0},
        {1, 0, 1, 0}
    };
    printf("Input adjacency matrix:\n");
    printMatrix(graph);
    warshallAlgorithm(graph);
    return 0;
}
